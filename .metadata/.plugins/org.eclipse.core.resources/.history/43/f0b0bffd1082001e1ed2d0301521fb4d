package com.doubtsharing.controllers;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.neo4j.Neo4jProperties.Authentication;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.doubtsharing.models.Language;
import com.doubtsharing.models.Subject;
import com.doubtsharing.models.UserType;
import com.doubtsharing.models.Users;
import com.doubtsharing.services.UserService;

import jakarta.validation.Valid;

@RestController
@RequestMapping("/doubt-sharing-app/auth")
public class UsersAuthenticationController {

	@Autowired
	private UserService userService;

	@Autowired
	private PasswordEncoder passwordEncoder;
	
	
	@PostMapping("/register-student") 
	           // http://localhost:8085/doubt-sharing-app/auth/register-student
	public ResponseEntity<Users> registerUserAsStudent(@Valid @RequestBody Users user) {

		user.setUserType(UserType.ROLE_STUDENT);
		
		user.setPassword(passwordEncoder.encode(user.getPassword()));
		
		Users registerUser = userService.registerUser(user);
		
		return new ResponseEntity<>(registerUser,HttpStatus.CREATED);
	}
	
	@PostMapping("/register-teacher/{subject-expertise}")
			// http://localhost:8085/doubt-sharing-app/auth/register-teacher
	public ResponseEntity<Users> registerUserAsTutor(@Valid @RequestBody Users user ,
			@PathVariable String subjectExpertise) {

		user.setUserType(UserType.ROLE_TUTOR);
		
		user.setSubjectExpertise(Subject.valueOf(subjectExpertise));
		
		Users registerUser = userService.registerUser(user);
		
		return new ResponseEntity<>(registerUser,HttpStatus.CREATED);
	}
	
	@GetMapping("/student/signIn")
				// http://localhost:8085/doubt-sharing-app/auth/student/signIn
	public ResponseEntity<Users> logInStudentHandler(Authentication auth){
		
			Users student = userService.retriveSpecificUser(auth.getUsername());
			
			return new ResponseEntity<>(student,HttpStatus.OK);
	}

	
	@GetMapping("/tutor/signIn")
				// http://localhost:8085/doubt-sharing-app/auth/tutor/signIn
	public ResponseEntity<Users> logInTutorHandler(Authentication auth){
		   
			Users tutor = userService.retriveSpecificUser(auth.getUsername());
			
			return new ResponseEntity<>(tutor,HttpStatus.OK);
	}
}
