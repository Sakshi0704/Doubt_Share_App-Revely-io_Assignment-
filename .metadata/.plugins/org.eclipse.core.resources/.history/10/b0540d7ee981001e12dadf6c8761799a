package com.doubtsharing.services;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.doubtsharing.exception.InvalidArgumentException;
import com.doubtsharing.exception.RecordNotFoundException;
import com.doubtsharing.models.Doubt;
import com.doubtsharing.models.Users;
import com.doubtsharing.repository.DoubtRepository;
import com.doubtsharing.repository.TutorAvailabilityRepository;
import com.doubtsharing.repository.UsersRepository;


@Service
public class DoubtHandlingServiceImpl implements DoubtHandlingService {

	@Autowired
	private DoubtRepository doubtRepository;
	
	@Autowired
	private UsersRepository usersRepository;
	
	@Autowired
	private TutorAvailabilityRepository tutorAvailableRepository;
	
	@Override
	public List<Doubt> getDoubtRequestHistoryByEmail(String email) throws InvalidArgumentException,RecordNotFoundException {
		
		if(email == null ||email.isBlank() || email.isEmpty()) {
			throw new InvalidArgumentException("Student email "+ email + " is invalid");
		}
		
		Optional<Users> user = usersRepository.findByEmail(email);
		
		if(user.isEmpty()) {
			throw new RecordNotFoundException("No Student found with email "+ email);
		}
		
		
        List<Doubt> doubtsHistory = doubtRepository.findAllByEmailOrderByRequestTimeDesc(email);
        
        if(doubtsHistory.isEmpty()) {
        	throw new RecordNotFoundException("No Student doubt history found in record");
        }
        
        return doubtsHistory; 
	}

	@Override
	public Doubt addDoubtRequest(Doubt doubtRequest , String email) throws InvalidArgumentException {
		
		if(email == null ||email.isBlank() || email.isEmpty()) {
			throw new InvalidArgumentException("Student email "+ email + " is invalid");
		}
		
		if(doubtRequest == null) {
			throw new InvalidArgumentException("doubt request is invalid");
		}
		
		
		Optional<Users> user = usersRepository.findByEmail(email);
		
		if(user.isEmpty()) {
			throw new RecordNotFoundException("No Student found with email "+ email);
		}
		
		doubtRepository.save(doubtRequest);
		
		return doubtRequest;
	}

	
	@Override
	public Doubt tutorAvailableLiveToResolveDoubt(Doubt doubtRequest, String email) throws InvalidArgumentException {
		// TODO Auto-generated method stub
		
		if(email == null ||email.isBlank() || email.isEmpty()) {
			throw new InvalidArgumentException("Student email "+ email + " is invalid");
		}
		
		if(doubtRequest == null) {
			throw new InvalidArgumentException("doubt request is invalid");
		}
		
		Optional<Users> user = usersRepository.findByEmail(email);
		
		List<Tutor> availableTutors = tutorAvailableRepository.findByOnlineStatus()
		
		return null;
	}
	
	@Override
	public Doubt doubtResolveByTutor(Integer doubtId, String solvedDesc, String email) throws InvalidArgumentException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<Doubt> doubtToResolve(String email) throws RecordNotFoundException, InvalidArgumentException {
		// TODO Auto-generated method stub
		return null;
	}

}
